----------- Orientação a Objetos -------------

- Princípios:

1) Coesão

Exemplo: 
Uma classe coesa é uma classe que executa bem a sua única tarefa, de forma concisa.
Cada classe deve ser responsável por apenas uma coisa, e deve executar esta tarefa muito bem


2) Encapsulamento

Encapsulamento é uma forma de manter os objetos das nossas classes protegidos, fornecendo apenas o que é estritamente necessário para o mundo exterior.
O fato de criar getters e setters para tudo, na verdade, quebra o encapsulamento da nossa classe.

Ao encapsular o acesso a determinados dados, liberando acesso apenas ao necessário, os objetos da nossa classe se tornam mais fáceis de serem utilizados.

No caso de atributos que possuem regras de negócio e validação o ideal é remover o métodos set, para evitar uma quebra de encapsulamento.
Se for algo simples, prefiro deixar na própria classe os métodos de manipulação de tais atributos, para manter a coesão do objeto.
Mas nos casos de validações mais complexas, que às vezes até precisaremos realizar consultas no banco de dados, o ideal seria separar em alguma classe de serviço.


3) Acoplamento

 classes dependam de outras para executar determinadas tarefas.
 
 É fato que, se estamos organizando o nosso código, seguindo as recomendações 
 da orientação a objetos, algum acoplamento acontecerá. 
 Algumas classes precisarão de outras, para que não tenham muitas responsabilidades. 
 Cabe a nós medir quando faz sentido adicionar tal acoplamento com as dependências 
 e como depender do que é seguro, ao invés de classes concretas.
 
 -------------------------------- SOLID --------------------------------------------------
 
 S - Single Responsibility Principle
 	 Uma classe (ou módulo, função, etc) deve ter um e apenas um motivo para mudar.
 
 O - Open Closed Principle
 	 Entidades de software (classes, modulos, funcoes, etc) devem estar abertas para extensao, porem fechadas para modificacao.
 	 Garantir que cada ação/responsabilidade esteja na classe correta. Esta é uma das formas de garantir que o sistema seja extensível.
 
 L - Liskov Substitution Principle
 	 Utilizar sempre a herança, pode trazer efeitos colaterais (exemplo da clsse funcinario, se a classe Terceirizado herdasse ela, ela iria trazer metodos que nao fazem sentido, como por exemplo o de promocao)
 	 Uma alternativa para evitar a herança indesejada, é utiliza a composição (como foi usado na classe DadosPessoais, que esta tanto em Funcionario como tambem em Terceirizado) 
 	 
 I - Interface Segregation Principle
 	 Classes não devem ser obrigadas a implementar métodos que não irão precisar.
 	 Uma classe não deve ser obrigada a implementar um método de determinada interface, se ele não será útil. Para isso, uma interface deverá ser extraída apenas com os métodos necessários.
 
 D - Dependency Inversion Principle
 	 Caso uma determinada implementação mude, não seremos afetados, pois dependemos apenas de sua interface.
 	 Se um método muda a forma como realiza sua tarefa, desde que a interface se mantenha, não vamos precisar nos preocupar nem em editar o nosso código.
 	 A implementação depende da abstracao, e nao a abstracao depende da implementacao
 
 